// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id       String @id @default(cuid())
  userId   String
  type     String
  provider String

  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  fname         String?
  lname         String?
  email         String?        @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Post[]
  GroupMember   GroupMember[]
  GroupAdmins   GroupAdmins[]
  GroupInvites  GroupInvites[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  annonymous Boolean  @default(false)
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  Duration   DateTime
  groupId    String
  Group      Group    @relation(fields: [groupId], references: [id])
  Likes      Int      @default(0)
}

model Group {
  id           String         @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  posts        Post[]
  GroupMembers GroupMember[]
  GroupAdmins  GroupAdmins[]
  GroupInvites GroupInvites[]
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  Group    Group    @relation(fields: [groupId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
}

model GroupAdmins {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  Group    Group    @relation(fields: [groupId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
}

model GroupInvites {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  Group    Group    @relation(fields: [groupId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
}
